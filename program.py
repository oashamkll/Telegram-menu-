import asyncio
import json
import sys
import re
import time
from pathlib import Path
from dataclasses import dataclass
from typing import Optional, List

from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.text import Text as RichText
from rich import box
from rich.live import Live
import questionary
from questionary import Separator

from telethon.sync import TelegramClient
from telethon.tl.types import Channel, User, Chat
from telethon.errors.rpcerrorlist import (
    SlowModeWaitError, FloodWaitError, SessionPasswordNeededError,
    ApiIdInvalidError, PhoneNumberInvalidError, PeerIdInvalidError
)

CONSOLE = Console()
ACCOUNTS_FILE = Path('accounts.json')
SESSIONS_DIR = Path('sessions')
SESSIONS_DIR.mkdir(exist_ok=True)

CUSTOM_STYLE = questionary.Style([
    ('qmark', 'fg:#4fc3f7 bold'),
    ('question', 'bold fg:#29b6f6'),
    ('selected', 'fg:#ff7043'),
    ('pointer', 'fg:#0288d1 bold'),
    ('answer', 'fg:#4fc3f7 bold'),
])

EMOJI = {
    '—É—Å–ø–µ—Ö': '[‚úÖ]',
    '–æ—à–∏–±–∫–∞': '[‚ùå]',
    '–≤–Ω–∏–º–∞–Ω–∏–µ': '[‚ö†Ô∏è]',
    '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è': '[‚ÑπÔ∏è]',
    '—Å–ø–∞–º': '[üß®]',
    '—Ä–∞—Å—Å—ã–ª–∫–∞': '[üì®]',
    '–≤—ã—Ö–æ–¥': '[üö™]',
    '—É–¥–∞–ª–∏—Ç—å': '[üóëÔ∏è]',
    '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': '[üë§]',
    '–±–æ—Ç': '[ü§ñ]',
    '–≥—Ä—É–ø–ø–∞': '[üë•]',
    '–∫–∞–Ω–∞–ª': '[üì¢]',
    '–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è': '[üîë]',
    '—Å—Ç–æ–ø': '[üõë]',
    '–ø—É—Å–∫': '[üöÄ]',
    '–Ω–∞–∑–∞–¥': '[üîô]'
}

@dataclass
class –ê–∫–∫–∞—É–Ω—Ç:
    api_id: int
    api_hash: str
    —Ç–µ–ª–µ—Ñ–æ–Ω: str
    –∏–º—è_—Å–µ—Å—Å–∏–∏: str

class –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–°–ø–∞–º–∞:
    def __init__(self):
        self.–∑–∞–ø—É—â–µ–Ω = False
        self.–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ = 0
        self.—Ü–µ–ª—å: Optional[str] = None
        self.—Å–æ–æ–±—â–µ–Ω–∏–µ: Optional[str] = None

class –ú–µ–Ω–µ–¥–∂–µ—Ä–ê–∫–∫–∞—É–Ω—Ç–æ–≤:
    def __init__(self):
        self.–∞–∫–∫–∞—É–Ω—Ç—ã: List[–ê–∫–∫–∞—É–Ω—Ç] = self._–∑–∞–≥—Ä—É–∑–∏—Ç—å()

    def _–∑–∞–≥—Ä—É–∑–∏—Ç—å(self) -> List[–ê–∫–∫–∞—É–Ω—Ç]:
        if not ACCOUNTS_FILE.exists():
            return []
        try:
            with ACCOUNTS_FILE.open('r', encoding='utf-8') as f:
                –¥–∞–Ω–Ω—ã–µ = json.load(f)
                return [–ê–∫–∫–∞—É–Ω—Ç(**–∞–∫–∫) for –∞–∫–∫ in –¥–∞–Ω–Ω—ã–µ]
        except (json.JSONDecodeError, IOError, TypeError):
            CONSOLE.print(Panel(f"{EMOJI['–æ—à–∏–±–∫–∞']} [bold red]–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª 'accounts.json'[/bold red]", border_style="red"))
            return []

    def _—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å(self):
        try:
            with ACCOUNTS_FILE.open('w', encoding='utf-8') as f:
                json.dump([–∞–∫–∫.__dict__ for –∞–∫–∫ in self.–∞–∫–∫–∞—É–Ω—Ç—ã], f, indent=4, ensure_ascii=False)
        except IOError as e:
            CONSOLE.print(Panel(f"{EMOJI['–æ—à–∏–±–∫–∞']} [bold red]–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã: {e}[/bold red]", border_style="red"))

    async def –≤—ã–±—Ä–∞—Ç—å(self) -> Optional[–ê–∫–∫–∞—É–Ω—Ç]:
        CONSOLE.clear()
        –∑–∞–≥–æ–ª–æ–≤–æ–∫ = f"\n{EMOJI['–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']} [bold #29b6f6]–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Telegram[/bold #29b6f6]\n"
        CONSOLE.print(Panel(–∑–∞–≥–æ–ª–æ–≤–æ–∫, style="bold #0288d1", padding=(1, 2), expand=False))

        if not self.–∞–∫–∫–∞—É–Ω—Ç—ã:
            CONSOLE.print(f"\n{EMOJI['–≤–Ω–∏–º–∞–Ω–∏–µ']} [yellow]–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.[/yellow]")
            if await questionary.confirm("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç?", style=CUSTOM_STYLE).ask_async():
                return await self.–¥–æ–±–∞–≤–∏—Ç—å()
            return None

        –≤–∞—Ä–∏–∞–Ω—Ç—ã = [
            {"name": f"{EMOJI['–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']} {–∞–∫–∫.—Ç–µ–ª–µ—Ñ–æ–Ω}", "value": –∞–∫–∫} for –∞–∫–∫ in self.–∞–∫–∫–∞—É–Ω—Ç—ã
        ] + [
            Separator(),
            {"name": f"{EMOJI['–ø—É—Å–∫']} –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç", "value": "–¥–æ–±–∞–≤–∏—Ç—å"},
            {"name": f"{EMOJI['—É–¥–∞–ª–∏—Ç—å']} –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", "value": "—É–¥–∞–ª–∏—Ç—å"},
            Separator(),
            {"name": f"{EMOJI['–≤—ã—Ö–æ–¥']} –í—ã—Ö–æ–¥", "value": "–≤—ã—Ö–æ–¥"}
        ]

        –¥–µ–π—Å—Ç–≤–∏–µ = await questionary.select("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", choices=–≤–∞—Ä–∏–∞–Ω—Ç—ã, style=CUSTOM_STYLE).ask_async()
        if –¥–µ–π—Å—Ç–≤–∏–µ == "–≤—ã—Ö–æ–¥" or –¥–µ–π—Å—Ç–≤–∏–µ is None:
            return None
        elif –¥–µ–π—Å—Ç–≤–∏–µ == "–¥–æ–±–∞–≤–∏—Ç—å":
            return await self.–¥–æ–±–∞–≤–∏—Ç—å()
        elif –¥–µ–π—Å—Ç–≤–∏–µ == "—É–¥–∞–ª–∏—Ç—å":
            await self.—É–¥–∞–ª–∏—Ç—å()
            return await self.–≤—ã–±—Ä–∞—Ç—å()
        else:
            return –¥–µ–π—Å—Ç–≤–∏–µ

    async def –¥–æ–±–∞–≤–∏—Ç—å(self) -> Optional[–ê–∫–∫–∞—É–Ω—Ç]:
        CONSOLE.clear()
        CONSOLE.print(Panel(f"{EMOJI['–ø—É—Å–∫']} [cyan]–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞[/cyan]", border_style="cyan", padding=(1, 2)))

        try:
            api_id = await questionary.text("API ID:", style=CUSTOM_STYLE).ask_async()
            api_hash = await questionary.text("API Hash:", style=CUSTOM_STYLE).ask_async()
            —Ç–µ–ª–µ—Ñ–æ–Ω = await questionary.text("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å +):", style=CUSTOM_STYLE).ask_async()

            if not all([api_id, api_hash, —Ç–µ–ª–µ—Ñ–æ–Ω]):
                raise ValueError("–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")

            api_id = int(api_id)
            –∏–º—è_—Å–µ—Å—Å–∏–∏ = f"session_{—Ç–µ–ª–µ—Ñ–æ–Ω.replace('+', '').replace(' ', '')}"
            –Ω–æ–≤—ã–π_–∞–∫–∫–∞—É–Ω—Ç = –ê–∫–∫–∞—É–Ω—Ç(api_id, api_hash, —Ç–µ–ª–µ—Ñ–æ–Ω, –∏–º—è_—Å–µ—Å—Å–∏–∏)
            self.–∞–∫–∫–∞—É–Ω—Ç—ã.append(–Ω–æ–≤—ã–π_–∞–∫–∫–∞—É–Ω—Ç)
            self._—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å()
            CONSOLE.print(Panel(f"{EMOJI['—É—Å–ø–µ—Ö']} [bold green]–ê–∫–∫–∞—É–Ω—Ç {—Ç–µ–ª–µ—Ñ–æ–Ω} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω![/bold green]", border_style="green"))
            await asyncio.sleep(1.5)
            return –Ω–æ–≤—ã–π_–∞–∫–∫–∞—É–Ω—Ç

        except (ValueError, TypeError):
            CONSOLE.print(Panel(f"{EMOJI['–æ—à–∏–±–∫–∞']} [bold red]–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.[/bold red]", border_style="red"))
            await asyncio.sleep(2)
            return None

    async def —É–¥–∞–ª–∏—Ç—å(self):
        if not self.–∞–∫–∫–∞—É–Ω—Ç—ã:
            CONSOLE.print(Panel(f"{EMOJI['–≤–Ω–∏–º–∞–Ω–∏–µ']} [yellow]–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.[/yellow]", border_style="yellow"))
            await asyncio.sleep(2)
            return

        –≤–∞—Ä–∏–∞–Ω—Ç—ã = [{"name": –∞–∫–∫.—Ç–µ–ª–µ—Ñ–æ–Ω, "value": –∞–∫–∫} for –∞–∫–∫ in self.–∞–∫–∫–∞—É–Ω—Ç—ã] + [{"name": f"{EMOJI['–Ω–∞–∑–∞–¥']} –û—Ç–º–µ–Ω–∞", "value": None}]
        –∞–∫–∫ = await questionary.select("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", choices=–≤–∞—Ä–∏–∞–Ω—Ç—ã, style=CUSTOM_STYLE).ask_async()
        if –∞–∫–∫ and await questionary.confirm(f"–£–¥–∞–ª–∏—Ç—å {–∞–∫–∫.—Ç–µ–ª–µ—Ñ–æ–Ω} –∏ —Å–µ—Å—Å–∏—é?", style=CUSTOM_STYLE).ask_async():
            —Ñ–∞–π–ª_—Å–µ—Å—Å–∏–∏ = SESSIONS_DIR / f"{–∞–∫–∫.–∏–º—è_—Å–µ—Å—Å–∏–∏}.session"
            —Ñ–∞–π–ª_—Å–µ—Å—Å–∏–∏.unlink(missing_ok=True)
            self.–∞–∫–∫–∞—É–Ω—Ç—ã.remove(–∞–∫–∫)
            self._—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å()
            CONSOLE.print(Panel(f"{EMOJI['—É—Å–ø–µ—Ö']} [green]–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω.[/green]", border_style="green"))
            await asyncio.sleep(1.5)

def —Å–æ–∑–¥–∞—Ç—å_3d_–±–∞–Ω–Ω–µ—Ä():
    —à–∏—Ä–∏–Ω–∞ = CONSOLE.width
    —Ç–µ–∫—Å—Ç = "TELEGA"
    —Ü–≤–µ—Ç–∞ = ["#01579b", "#0288d1", "#29b6f6", "#4fc3f7", "#29b6f6", "#0288d1", "#01579b"]
    
    —Å—Ç—Ä–æ–∫–∏ = []
    for i, —Å–∏–º–≤–æ–ª in enumerate(—Ç–µ–∫—Å—Ç):
        —Ü–≤–µ—Ç = —Ü–≤–µ—Ç–∞[i % len(—Ü–≤–µ—Ç–∞)]
        —Å—Ç—Ä–æ–∫–∏.append(f"[{—Ü–≤–µ—Ç}]{—Å–∏–º–≤–æ–ª}[/{—Ü–≤–µ—Ç}]")
    
    —Å—Ç—Ä–æ–∫–∞ = "".join(—Å—Ç—Ä–æ–∫–∏)
    –æ—Ç—Å—Ç—É–ø = max(0, (—à–∏—Ä–∏–Ω–∞ - len(—Ç–µ–∫—Å—Ç) * 2) // 2)
    –æ—Ç—Å—Ç—É–ø_–ø—Ä–æ–±–µ–ª—ã = " " * –æ—Ç—Å—Ç—É–ø
    
    –±–∞–Ω–Ω–µ—Ä = f"""
{–æ—Ç—Å—Ç—É–ø_–ø—Ä–æ–±–µ–ª—ã}[#01579b]T[/#01579b][#0288d1]E[/#0288d1][#29b6f6]L[/#29b6f6][#4fc3f7]E[/#4fc3f7][#29b6f6]G[/#29b6f6][#0288d1]A[/#0288d1]
{–æ—Ç—Å—Ç—É–ø_–ø—Ä–æ–±–µ–ª—ã} [#0288d1]T[/#0288d1][#29b6f6]E[/#29b6f6][#4fc3f7]L[/#4fc3f7][#29b6f6]E[/#29b6f6][#0288d1]G[/#0288d1][#01579b]A[/#01579b]
{–æ—Ç—Å—Ç—É–ø_–ø—Ä–æ–±–µ–ª—ã}  [#29b6f6]T[/#29b6f6][#4fc3f7]E[/#4fc3f7][#29b6f6]L[/#29b6f6][#0288d1]E[/#0288d1][#01579b]G[/#01579b][#0288d1]A[/#0288d1]
{–æ—Ç—Å—Ç—É–ø_–ø—Ä–æ–±–µ–ª—ã}   [#4fc3f7]T[/#4fc3f7][#29b6f6]E[/#29b6f6][#0288d1]L[/#0288d1][#01579b]E[/#01579b][#0288d1]G[/#0288d1][#29b6f6]A[/#29b6f6]
"""
    return –±–∞–Ω–Ω–µ—Ä.strip()

class –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–¢–µ–ª–µ–≥—Ä–∞–º:
    def __init__(self, –∞–∫–∫–∞—É–Ω—Ç: –ê–∫–∫–∞—É–Ω—Ç):
        self.–∞–∫–∫–∞—É–Ω—Ç = –∞–∫–∫–∞—É–Ω—Ç
        –ø—É—Ç—å_—Å–µ—Å—Å–∏–∏ = SESSIONS_DIR / –∞–∫–∫–∞—É–Ω—Ç.–∏–º—è_—Å–µ—Å—Å–∏–∏
        self.–∫–ª–∏–µ–Ω—Ç = TelegramClient(str(–ø—É—Ç—å_—Å–µ—Å—Å–∏–∏), –∞–∫–∫–∞—É–Ω—Ç.api_id, –∞–∫–∫–∞—É–Ω—Ç.api_hash)
        self.—è = None
        self.—Ç–µ–∫—É—â–µ–µ_–¥–µ–π—Å—Ç–≤–∏–µ = "–û–∂–∏–¥–∞–Ω–∏–µ"
        self.–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä_—Å–ø–∞–º–∞ = –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–°–ø–∞–º–∞()

    def _–≤—ã–≤–µ—Å—Ç–∏_–∑–∞–≥–æ–ª–æ–≤–æ–∫(self):
        CONSOLE.clear()
        —Å—Ç—Ä–æ–∫–∏ = []

        if self.—è:
            –∏–º—è = f"{self.—è.first_name or ''} {self.—è.last_name or ''}".strip() or self.—è.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            —Å—Ç—Ä–æ–∫–∏.append(f"{EMOJI['–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']} [bold #4fc3f7]{–∏–º—è}[/bold #4fc3f7]")
            —Å—Ç—Ä–æ–∫–∏.append(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: [cyan]{self.–∞–∫–∫–∞—É–Ω—Ç.—Ç–µ–ª–µ—Ñ–æ–Ω}[/cyan]")
        else:
            —Å—Ç—Ä–æ–∫–∏.append(f"üì± –ê–∫–∫–∞—É–Ω—Ç: [cyan]{self.–∞–∫–∫–∞—É–Ω—Ç.—Ç–µ–ª–µ—Ñ–æ–Ω}[/cyan]")

        —Å—Ç—Ä–æ–∫–∏.append(f"‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏–µ: [bold #29b6f6]{self.—Ç–µ–∫—É—â–µ–µ_–¥–µ–π—Å—Ç–≤–∏–µ}[/bold #29b6f6]")

        if self.–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä_—Å–ø–∞–º–∞.–∑–∞–ø—É—â–µ–Ω:
            —Å—Ç—Ä–æ–∫–∏.append(f"{EMOJI['—Å–ø–∞–º']} [bold red]–°–ü–ê–ú –ê–ö–¢–ò–í–ï–ù[/bold red] | –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä_—Å–ø–∞–º–∞.–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ}")

        CONSOLE.print(Panel("\n".join(—Å—Ç—Ä–æ–∫–∏), style="bold #0288d1", padding=(1, 2), expand=False))

    async def –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è(self) -> bool:
        self.—Ç–µ–∫—É—â–µ–µ_–¥–µ–π—Å—Ç–≤–∏–µ = "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram..."
        self._–≤—ã–≤–µ—Å—Ç–∏_–∑–∞–≥–æ–ª–æ–≤–æ–∫()

        try:
            await self.–∫–ª–∏–µ–Ω—Ç.connect()
            if not await self.–∫–ª–∏–µ–Ω—Ç.is_user_authorized():
                CONSOLE.print(f"\n{EMOJI['–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è']} –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è {self.–∞–∫–∫–∞—É–Ω—Ç.—Ç–µ–ª–µ—Ñ–æ–Ω}")
                await self.–∫–ª–∏–µ–Ω—Ç.send_code_request(self.–∞–∫–∫–∞—É–Ω—Ç.—Ç–µ–ª–µ—Ñ–æ–Ω)
                –∫–æ–¥ = await questionary.text("–ö–æ–¥ –∏–∑ Telegram:", style=CUSTOM_STYLE).ask_async()
                if not –∫–æ–¥:
                    return False
                try:
                    await self.–∫–ª–∏–µ–Ω—Ç.sign_in(self.–∞–∫–∫–∞—É–Ω—Ç.—Ç–µ–ª–µ—Ñ–æ–Ω, –∫–æ–¥)
                except SessionPasswordNeededError:
                    –ø–∞—Ä–æ–ª—å = await questionary.password("–ü–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", style=CUSTOM_STYLE).ask_async()
                    if –ø–∞—Ä–æ–ª—å:
                        await self.–∫–ª–∏–µ–Ω—Ç.sign_in(password=–ø–∞—Ä–æ–ª—å)
                    else:
                        return False

            self.—è = await self.–∫–ª–∏–µ–Ω—Ç.get_me()
            return True

        except (ApiIdInvalidError, PhoneNumberInvalidError) as e:
            CONSOLE.print(Panel(f"{EMOJI['–æ—à–∏–±–∫–∞']} [bold red]–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}[/bold red]", border_style="red"))
        except Exception as e:
            CONSOLE.print(Panel(f"{EMOJI['–æ—à–∏–±–∫–∞']} [bold red]–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}[/bold red]", border_style="red"))
        return False

    async def –∑–∞–ø—É—Å—Ç–∏—Ç—å(self):
        while True:
            self.—Ç–µ–∫—É—â–µ–µ_–¥–µ–π—Å—Ç–≤–∏–µ = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            self._–≤—ã–≤–µ—Å—Ç–∏_–∑–∞–≥–æ–ª–æ–≤–æ–∫()

            –º–µ–Ω—é = [
                Separator(f" {EMOJI['–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']} –ü—Ä–æ—Å–º–æ—Ç—Ä "),
                f"{EMOJI['–∫–∞–Ω–∞–ª']} –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤",
                f"{EMOJI['–≥—Ä—É–ø–ø–∞']} –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø",
                f"{EMOJI['–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']} –°–ø–∏—Å–æ–∫ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤",
                f"{EMOJI['–±–æ—Ç']} –°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤",

                Separator(f" {EMOJI['—Ä–∞—Å—Å—ã–ª–∫–∞']} –†–∞—Å—Å—ã–ª–∫–∞ "),
                f"{EMOJI['—Ä–∞—Å—Å—ã–ª–∫–∞']} –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã",
                f"{EMOJI['—Ä–∞—Å—Å—ã–ª–∫–∞']} –†–∞—Å—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—ã",

                Separator(f" {EMOJI['—Å–ø–∞–º']} –°–ø–∞–º "),
                f"{EMOJI['–ø—É—Å–∫']} –ù–∞—á–∞—Ç—å —Å–ø–∞–º",
                f"{EMOJI['—Å—Ç–æ–ø']} –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º",

                Separator(f" {EMOJI['—É–¥–∞–ª–∏—Ç—å']} –£–¥–∞–ª–µ–Ω–∏–µ "),
                f"{EMOJI['–≤—ã—Ö–æ–¥']} –ü–æ–∫–∏–Ω—É—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã",
                f"{EMOJI['–≤—ã—Ö–æ–¥']} –ü–æ–∫–∏–Ω—É—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã",
                f"{EMOJI['—É–¥–∞–ª–∏—Ç—å']} –£–¥–∞–ª–∏—Ç—å –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã",
                f"{EMOJI['—É–¥–∞–ª–∏—Ç—å']} –£–¥–∞–ª–∏—Ç—å –±–æ—Ç–æ–≤",

                Separator(f" {EMOJI['–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']} –ê–∫–∫–∞—É–Ω—Ç "),
                f"{EMOJI['–Ω–∞–∑–∞–¥']} –°–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
                f"{EMOJI['–≤—ã—Ö–æ–¥']} –í—ã—Ö–æ–¥"
            ]

            –≤—ã–±–æ—Ä = await questionary.select("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", choices=–º–µ–Ω—é, style=CUSTOM_STYLE).ask_async()
            if –≤—ã–±–æ—Ä is None or "–í—ã—Ö–æ–¥" in –≤—ã–±–æ—Ä:
                sys.exit(0)
            elif "–°–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç" in –≤—ã–±–æ—Ä:
                return

            await self._–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å_–≤—ã–±–æ—Ä(–≤—ã–±–æ—Ä)

    async def _–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å_–≤—ã–±–æ—Ä(self, –≤—ã–±–æ—Ä: str):
        —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ = {
            "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤": ("–ø–æ–∫–∞–∑–∞—Ç—å_–¥–∏–∞–ª–æ–≥–∏", "–∫–∞–Ω–∞–ª—ã"),
            "–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø": ("–ø–æ–∫–∞–∑–∞—Ç—å_–¥–∏–∞–ª–æ–≥–∏", "–≥—Ä—É–ø–ø—ã"),
            "–°–ø–∏—Å–æ–∫ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤": ("–ø–æ–∫–∞–∑–∞—Ç—å_–¥–∏–∞–ª–æ–≥–∏", "–ª–∏—á–Ω—ã–µ"),
            "–°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤": ("–ø–æ–∫–∞–∑–∞—Ç—å_–¥–∏–∞–ª–æ–≥–∏", "–±–æ—Ç—ã"),
            "–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã": ("–≤—ã–ø–æ–ª–Ω–∏—Ç—å_–º–∞—Å—Å–æ–≤–æ–µ_–¥–µ–π—Å—Ç–≤–∏–µ", "—Ä–∞—Å—Å—ã–ª–∫–∞_–ª–∏—á–Ω—ã–µ"),
            "–†–∞—Å—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—ã": ("–≤—ã–ø–æ–ª–Ω–∏—Ç—å_–º–∞—Å—Å–æ–≤–æ–µ_–¥–µ–π—Å—Ç–≤–∏–µ", "—Ä–∞—Å—Å—ã–ª–∫–∞_–≥—Ä—É–ø–ø—ã"),
            "–ù–∞—á–∞—Ç—å —Å–ø–∞–º": ("–Ω–∞—á–∞—Ç—å_—Å–ø–∞–º", None),
            "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º": ("–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_—Å–ø–∞–º", None),
            "–ü–æ–∫–∏–Ω—É—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã": ("–≤—ã–ø–æ–ª–Ω–∏—Ç—å_–º–∞—Å—Å–æ–≤–æ–µ_–¥–µ–π—Å—Ç–≤–∏–µ", "–ø–æ–∫–∏–Ω—É—Ç—å_–∫–∞–Ω–∞–ª—ã"),
            "–ü–æ–∫–∏–Ω—É—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø—ã": ("–≤—ã–ø–æ–ª–Ω–∏—Ç—å_–º–∞—Å—Å–æ–≤–æ–µ_–¥–µ–π—Å—Ç–≤–∏–µ", "–ø–æ–∫–∏–Ω—É—Ç—å_–≥—Ä—É–ø–ø—ã"),
            "–£–¥–∞–ª–∏—Ç—å –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã": ("–≤—ã–ø–æ–ª–Ω–∏—Ç—å_–º–∞—Å—Å–æ–≤–æ–µ_–¥–µ–π—Å—Ç–≤–∏–µ", "—É–¥–∞–ª–∏—Ç—å_–ª–∏—á–Ω—ã–µ"),
            "–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–æ–≤": ("–≤—ã–ø–æ–ª–Ω–∏—Ç—å_–º–∞—Å—Å–æ–≤–æ–µ_–¥–µ–π—Å—Ç–≤–∏–µ", "—É–¥–∞–ª–∏—Ç—å_–±–æ—Ç–æ–≤"),
        }

        —á–∏—Å—Ç—ã–π_–≤—ã–±–æ—Ä = re.sub(r'^[^\s]+\s*', '', –≤—ã–±–æ—Ä)
        if —á–∏—Å—Ç—ã–π_–≤—ã–±–æ—Ä in —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ:
            –∏–º—è_–º–µ—Ç–æ–¥–∞, –∞—Ä–≥ = —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ[—á–∏—Å—Ç—ã–π_–≤—ã–±–æ—Ä]
            –º–µ—Ç–æ–¥ = getattr(self, –∏–º—è_–º–µ—Ç–æ–¥–∞)
            self.—Ç–µ–∫—É—â–µ–µ_–¥–µ–π—Å—Ç–≤–∏–µ = —á–∏—Å—Ç—ã–π_–≤—ã–±–æ—Ä
            self._–≤—ã–≤–µ—Å—Ç–∏_–∑–∞–≥–æ–ª–æ–≤–æ–∫()
            if –∞—Ä–≥:
                await –º–µ—Ç–æ–¥(–∞—Ä–≥)
            else:
                await –º–µ—Ç–æ–¥()
            if not self.–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä_—Å–ø–∞–º–∞.–∑–∞–ø—É—â–µ–Ω:
                await questionary.press_any_key_to_continue("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞...").ask_async()

    async def –ø–æ–∫–∞–∑–∞—Ç—å_–¥–∏–∞–ª–æ–≥–∏(self, —Ç–∏–ø: str):
        –Ω–∞–∑–≤–∞–Ω–∏—è = {
            '–∫–∞–Ω–∞–ª—ã': f"{EMOJI['–∫–∞–Ω–∞–ª']} –ö–∞–Ω–∞–ª—ã",
            '–≥—Ä—É–ø–ø—ã': f"{EMOJI['–≥—Ä—É–ø–ø–∞']} –ì—Ä—É–ø–ø—ã",
            '–ª–∏—á–Ω—ã–µ': f"{EMOJI['–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']} –õ–∏—á–Ω—ã–µ —á–∞—Ç—ã",
            '–±–æ—Ç—ã': f"{EMOJI['–±–æ—Ç']} –ë–æ—Ç—ã"
        }

        –¥–∏–∞–ª–æ–≥–∏ = []
        async for –¥–∏–∞–ª–æ–≥ in self.–∫–ª–∏–µ–Ω—Ç.iter_dialogs():
            —Å—É—â–Ω–æ—Å—Ç—å = –¥–∏–∞–ª–æ–≥.entity
            if —Ç–∏–ø == '–∫–∞–Ω–∞–ª—ã' and isinstance(—Å—É—â–Ω–æ—Å—Ç—å, Channel) and not —Å—É—â–Ω–æ—Å—Ç—å.megagroup:
                –¥–∏–∞–ª–æ–≥–∏.append((—Å—É—â–Ω–æ—Å—Ç—å.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è", str(—Å—É—â–Ω–æ—Å—Ç—å.id)))
            elif —Ç–∏–ø == '–≥—Ä—É–ø–ø—ã' and (isinstance(—Å—É—â–Ω–æ—Å—Ç—å, Chat) or (isinstance(—Å—É—â–Ω–æ—Å—Ç—å, Channel) and —Å—É—â–Ω–æ—Å—Ç—å.megagroup)):
                –¥–∏–∞–ª–æ–≥–∏.append((—Å—É—â–Ω–æ—Å—Ç—å.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è", str(—Å—É—â–Ω–æ—Å—Ç—å.id)))
            elif —Ç–∏–ø == '–ª–∏—á–Ω—ã–µ' and isinstance(—Å—É—â–Ω–æ—Å—Ç—å, User) and not —Å—É—â–Ω–æ—Å—Ç—å.bot and not —Å—É—â–Ω–æ—Å—Ç—å.is_self:
                –∏–º—è = f"{—Å—É—â–Ω–æ—Å—Ç—å.first_name or ''} {—Å—É—â–Ω–æ—Å—Ç—å.last_name or ''}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                –¥–∏–∞–ª–æ–≥–∏.append((–∏–º—è, str(—Å—É—â–Ω–æ—Å—Ç—å.id)))
            elif —Ç–∏–ø == '–±–æ—Ç—ã' and isinstance(—Å—É—â–Ω–æ—Å—Ç—å, User) and —Å—É—â–Ω–æ—Å—Ç—å.bot:
                –¥–∏–∞–ª–æ–≥–∏.append((—Å—É—â–Ω–æ—Å—Ç—å.first_name or "–ë–æ—Ç", str(—Å—É—â–Ω–æ—Å—Ç—å.id)))

        if –¥–∏–∞–ª–æ–≥–∏:
            —Ç–∞–±–ª–∏—Ü–∞ = Table(title=–Ω–∞–∑–≤–∞–Ω–∏—è[—Ç–∏–ø], box=box.ROUNDED, header_style="bold #29b6f6")
            —Ç–∞–±–ª–∏—Ü–∞.add_column("#", style="dim", width=4)
            —Ç–∞–±–ª–∏—Ü–∞.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", min_width=20, max_width=CONSOLE.width - 30)
            —Ç–∞–±–ª–∏—Ü–∞.add_column("ID", justify="right")
            for i, (–Ω–∞–∑–≤–∞–Ω–∏–µ, id_) in enumerate(–¥–∏–∞–ª–æ–≥–∏, 1):
                —Ç–∞–±–ª–∏—Ü–∞.add_row(str(i), –Ω–∞–∑–≤–∞–Ω–∏–µ, id_)
            CONSOLE.print(—Ç–∞–±–ª–∏—Ü–∞)
        else:
            CONSOLE.print(Panel(f"{EMOJI['–≤–Ω–∏–º–∞–Ω–∏–µ']} –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.", border_style="yellow"))

    async def –Ω–∞—á–∞—Ç—å_—Å–ø–∞–º(self):
        if self.–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä_—Å–ø–∞–º–∞.–∑–∞–ø—É—â–µ–Ω:
            CONSOLE.print(Panel(f"{EMOJI['–≤–Ω–∏–º–∞–Ω–∏–µ']} –°–ø–∞–º —É–∂–µ –∑–∞–ø—É—â–µ–Ω!", border_style="yellow"))
            await asyncio.sleep(1.5)
            return

        –≤—ã–±–æ—Ä_—á–∞—Ç–∞ = await questionary.select("–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å —á–∞—Ç?", choices=[
            "–í–≤–µ—Å—Ç–∏ ID –≤—Ä—É—á–Ω—É—é",
            "–ò–∑ –∫–∞–Ω–∞–ª–æ–≤", "–ò–∑ –≥—Ä—É–ø–ø", "–ò–∑ –±–æ—Ç–æ–≤", "–ò–∑ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤", "–û—Ç–º–µ–Ω–∞"
        ], style=CUSTOM_STYLE).ask_async()

        if –≤—ã–±–æ—Ä_—á–∞—Ç–∞ == "–û—Ç–º–µ–Ω–∞":
            return

        id_—á–∞—Ç–∞ = await self._–ø–æ–ª—É—á–∏—Ç—å_id_—á–∞—Ç–∞(–≤—ã–±–æ—Ä_—á–∞—Ç–∞)
        if not id_—á–∞—Ç–∞:
            return

        —Å–æ–æ–±—â–µ–Ω–∏–µ = await self._–ø–æ–ª—É—á–∏—Ç—å_—Å–æ–æ–±—â–µ–Ω–∏–µ_–¥–ª—è_—Å–ø–∞–º–∞()
        if not —Å–æ–æ–±—â–µ–Ω–∏–µ:
            return

        –∑–∞–¥–µ—Ä–∂–∫–∞_str = await questionary.text(
            "–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (—Å–µ–∫, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥: 0.1, 0.05 –∏ —Ç.–¥.):",
            default="1.0",
            style=CUSTOM_STYLE
        ).ask_async()

        try:
            –∑–∞–¥–µ—Ä–∂–∫–∞ = float(–∑–∞–¥–µ—Ä–∂–∫–∞_str)
            if –∑–∞–¥–µ—Ä–∂–∫–∞ <= 0:
                raise ValueError("–ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0")
        except ValueError:
            CONSOLE.print(Panel(f"{EMOJI['–æ—à–∏–±–∫–∞']} –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–¥–µ—Ä–∂–∫–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.1).", border_style="red"))
            return

        if –∑–∞–¥–µ—Ä–∂–∫–∞ < 0.5:
            CONSOLE.print(Panel(
                f"{EMOJI['–≤–Ω–∏–º–∞–Ω–∏–µ']} [bold yellow]–í–Ω–∏–º–∞–Ω–∏–µ![/bold yellow] –ó–∞–¥–µ—Ä–∂–∫–∞ < 0.5 —Å–µ–∫—É–Ω–¥ —Å–∏–ª—å–Ω–æ –ø–æ–≤—ã—à–∞–µ—Ç —Ä–∏—Å–∫ [bold red]–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π[/bold red] –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞!",
                border_style="yellow"
            ))
            if not await questionary.confirm("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ä–∏—Å–∫?", default=False, style=CUSTOM_STYLE).ask_async():
                return

        if not await questionary.confirm(f"–ù–∞—á–∞—Ç—å —Å–ø–∞–º –≤ —á–∞—Ç {id_—á–∞—Ç–∞}?", style=CUSTOM_STYLE).ask_async():
            return

        self.–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä_—Å–ø–∞–º–∞.–∑–∞–ø—É—â–µ–Ω = True
        self.–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä_—Å–ø–∞–º–∞.—Ü–µ–ª—å = id_—á–∞—Ç–∞
        self.–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä_—Å–ø–∞–º–∞.—Å–æ–æ–±—â–µ–Ω–∏–µ = —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä_—Å–ø–∞–º–∞.–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ = 0

        CONSOLE.print(Panel(f"{EMOJI['–ø—É—Å–∫']} [green]–°–ø–∞–º –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º' –≤ –º–µ–Ω—é.[/green]", border_style="green"))
        asyncio.create_task(self._—Ü–∏–∫–ª_—Å–ø–∞–º–∞(–∑–∞–¥–µ—Ä–∂–∫–∞))

    async def _–ø–æ–ª—É—á–∏—Ç—å_id_—á–∞—Ç–∞(self, –º–µ—Ç–æ–¥: str) -> Optional[str]:
        if –º–µ—Ç–æ–¥ == "–í–≤–µ—Å—Ç–∏ ID –≤—Ä—É—á–Ω—É—é":
            raw = await questionary.text("ID —á–∞—Ç–∞:", style=CUSTOM_STYLE).ask_async()
            return raw.strip() if raw else None

        –∫–∞—Ä—Ç–∞_—Ç–∏–ø–æ–≤ = {"–ò–∑ –∫–∞–Ω–∞–ª–æ–≤": "–∫–∞–Ω–∞–ª—ã", "–ò–∑ –≥—Ä—É–ø–ø": "–≥—Ä—É–ø–ø—ã", "–ò–∑ –±–æ—Ç–æ–≤": "–±–æ—Ç—ã", "–ò–∑ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤": "–ª–∏—á–Ω—ã–µ"}
        —Ç–∏–ø = –∫–∞—Ä—Ç–∞_—Ç–∏–ø–æ–≤[–º–µ—Ç–æ–¥]
        –¥–∏–∞–ª–æ–≥–∏ = []

        async for –¥–∏–∞–ª–æ–≥ in self.–∫–ª–∏–µ–Ω—Ç.iter_dialogs():
            —Å—É—â–Ω–æ—Å—Ç—å = –¥–∏–∞–ª–æ–≥.entity
            —É—Å–ª–æ–≤–∏—è = {
                "–∫–∞–Ω–∞–ª—ã": isinstance(—Å—É—â–Ω–æ—Å—Ç—å, Channel) and not —Å—É—â–Ω–æ—Å—Ç—å.megagroup,
                "–≥—Ä—É–ø–ø—ã": isinstance(—Å—É—â–Ω–æ—Å—Ç—å, Chat) or (isinstance(—Å—É—â–Ω–æ—Å—Ç—å, Channel) and —Å—É—â–Ω–æ—Å—Ç—å.megagroup),
                "–±–æ—Ç—ã": isinstance(—Å—É—â–Ω–æ—Å—Ç—å, User) and —Å—É—â–Ω–æ—Å—Ç—å.bot,
                "–ª–∏—á–Ω—ã–µ": isinstance(—Å—É—â–Ω–æ—Å—Ç—å, User) and not —Å—É—â–Ω–æ—Å—Ç—å.bot and not —Å—É—â–Ω–æ—Å—Ç—å.is_self
            }
            if —É—Å–ª–æ–≤–∏—è[—Ç–∏–ø]:
                –Ω–∞–∑–≤–∞–Ω–∏–µ = getattr(—Å—É—â–Ω–æ—Å—Ç—å, 'title', None) or getattr(—Å—É—â–Ω–æ—Å—Ç—å, 'first_name', '???')
                –¥–∏–∞–ª–æ–≥–∏.append((–Ω–∞–∑–≤–∞–Ω–∏–µ, str(—Å—É—â–Ω–æ—Å—Ç—å.id)))

        if not –¥–∏–∞–ª–æ–≥–∏:
            CONSOLE.print(Panel(f"{EMOJI['–≤–Ω–∏–º–∞–Ω–∏–µ']} –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —á–∞—Ç–æ–≤.", border_style="yellow"))
            return None

        –≤–∞—Ä–∏–∞–Ω—Ç—ã = [f"{–Ω–∞–∑–≤–∞–Ω–∏–µ} (ID: {id_})" for –Ω–∞–∑–≤–∞–Ω–∏–µ, id_ in –¥–∏–∞–ª–æ–≥–∏] + ["–û—Ç–º–µ–Ω–∞"]
        –≤—ã–±—Ä–∞–Ω–Ω—ã–π = await questionary.select("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:", choices=–≤–∞—Ä–∏–∞–Ω—Ç—ã, style=CUSTOM_STYLE).ask_async()
        if –≤—ã–±—Ä–∞–Ω–Ω—ã–π == "–û—Ç–º–µ–Ω–∞":
            return None
        —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ = re.search(r'ID:\s*(\d+)', –≤—ã–±—Ä–∞–Ω–Ω—ã–π)
        return —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ.group(1) if —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ else None

    async def _–ø–æ–ª—É—á–∏—Ç—å_—Å–æ–æ–±—â–µ–Ω–∏–µ_–¥–ª—è_—Å–ø–∞–º–∞(self) -> Optional[str]:
        –∏—Å—Ç–æ—á–Ω–∏–∫ = await questionary.select("–ò—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è:", choices=[
            "–í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç", "–ò–∑ –ò–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", "–û—Ç–º–µ–Ω–∞"
        ], style=CUSTOM_STYLE).ask_async()
        if –∏—Å—Ç–æ—á–Ω–∏–∫ == "–û—Ç–º–µ–Ω–∞":
            return None
        elif –∏—Å—Ç–æ—á–Ω–∏–∫ == "–í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç":
            return await questionary.text("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:", style=CUSTOM_STYLE).ask_async()
        else:
            —Å–æ–æ–±—â–µ–Ω–∏—è = await self.–∫–ª–∏–µ–Ω—Ç.get_messages('me', limit=1)
            if —Å–æ–æ–±—â–µ–Ω–∏—è and —Å–æ–æ–±—â–µ–Ω–∏—è[0].text:
                return —Å–æ–æ–±—â–µ–Ω–∏—è[0].text
            else:
                CONSOLE.print(Panel(f"{EMOJI['–≤–Ω–∏–º–∞–Ω–∏–µ']} –í –ò–∑–±—Ä–∞–Ω–Ω–æ–º –Ω–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.", border_style="yellow"))
                return None

    async def _—Ü–∏–∫–ª_—Å–ø–∞–º–∞(self, –∑–∞–¥–µ—Ä–∂–∫–∞: float):
        –≤—Ä–µ–º—è_—Å—Ç–∞—Ä—Ç–∞ = time.time()
        —Ç–µ–∫—Å—Ç = RichText(f"{EMOJI['—Å–ø–∞–º']} [bold red]–°–ø–∞–º –∞–∫—Ç–∏–≤–µ–Ω...[/bold red]\n", style="bold")
        —Ç–µ–∫—Å—Ç.append(f"–¶–µ–ª—å: {self.–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä_—Å–ø–∞–º–∞.—Ü–µ–ª—å}\n")
        —Ç–µ–∫—Å—Ç.append(f"–ó–∞–¥–µ—Ä–∂–∫–∞: {–∑–∞–¥–µ—Ä–∂–∫–∞:.3f} —Å–µ–∫\n")
        —Ç–µ–∫—Å—Ç.append(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0 —Å–æ–æ–±—â–µ–Ω–∏–π\n")
        —Ç–µ–∫—Å—Ç.append(f"–ü—Ä–æ—à–ª–æ: 0 —Å–µ–∫")

        with Live(—Ç–µ–∫—Å—Ç, refresh_per_second=4, console=CONSOLE) as live:
            try:
                while self.–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä_—Å–ø–∞–º–∞.–∑–∞–ø—É—â–µ–Ω:
                    try:
                        —Ü–µ–ª—å = int(self.–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä_—Å–ø–∞–º–∞.—Ü–µ–ª—å)
                        await self.–∫–ª–∏–µ–Ω—Ç.send_message(—Ü–µ–ª—å, self.–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä_—Å–ø–∞–º–∞.—Å–æ–æ–±—â–µ–Ω–∏–µ)
                        self.–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä_—Å–ø–∞–º–∞.–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ += 1
                    except (ValueError, PeerIdInvalidError):
                        CONSOLE.print(f"\n{EMOJI['–æ—à–∏–±–∫–∞']} –ù–µ–≤–µ—Ä–Ω—ã–π ID —á–∞—Ç–∞: {self.–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä_—Å–ø–∞–º–∞.—Ü–µ–ª—å}")
                        break
                    except FloodWaitError as e:
                        CONSOLE.print(f"\n{EMOJI['–≤–Ω–∏–º–∞–Ω–∏–µ']} –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –∂–¥—ë–º {e.seconds} —Å–µ–∫...")
                        await asyncio.sleep(e.seconds)
                    except SlowModeWaitError as e:
                        CONSOLE.print(f"\n{EMOJI['–≤–Ω–∏–º–∞–Ω–∏–µ']} –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: –∂–¥—ë–º {e.seconds} —Å–µ–∫...")
                        await asyncio.sleep(e.seconds)
                    except Exception as e:
                        CONSOLE.print(f"\n{EMOJI['–æ—à–∏–±–∫–∞']} –û—à–∏–±–∫–∞: {e}")
                        break

                    –ø—Ä–æ—à–ª–æ = time.time() - –≤—Ä–µ–º—è_—Å—Ç–∞—Ä—Ç–∞
                    —Ç–µ–∫—Å—Ç = RichText(f"{EMOJI['—Å–ø–∞–º']} [bold red]–°–ø–∞–º –∞–∫—Ç–∏–≤–µ–Ω...[/bold red]\n", style="bold")
                    —Ç–µ–∫—Å—Ç.append(f"–¶–µ–ª—å: {self.–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä_—Å–ø–∞–º–∞.—Ü–µ–ª—å}\n")
                    —Ç–µ–∫—Å—Ç.append(f"–ó–∞–¥–µ—Ä–∂–∫–∞: {–∑–∞–¥–µ—Ä–∂–∫–∞:.3f} —Å–µ–∫\n")
                    —Ç–µ–∫—Å—Ç.append(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä_—Å–ø–∞–º–∞.–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ} —Å–æ–æ–±—â–µ–Ω–∏–π\n")
                    —Ç–µ–∫—Å—Ç.append(f"–ü—Ä–æ—à–ª–æ: {–ø—Ä–æ—à–ª–æ:.1f} —Å–µ–∫")
                    live.update(—Ç–µ–∫—Å—Ç)

                    await asyncio.sleep(–∑–∞–¥–µ—Ä–∂–∫–∞)
            finally:
                self.–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä_—Å–ø–∞–º–∞.–∑–∞–ø—É—â–µ–Ω = False
                CONSOLE.print(f"\n{EMOJI['—Å—Ç–æ–ø']} [bold green]–°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä_—Å–ø–∞–º–∞.–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ}[/bold green]")

    async def –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_—Å–ø–∞–º(self):
        if self.–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä_—Å–ø–∞–º–∞.–∑–∞–ø—É—â–µ–Ω:
            self.–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä_—Å–ø–∞–º–∞.–∑–∞–ø—É—â–µ–Ω = False
            CONSOLE.print(Panel(f"{EMOJI['—Å—Ç–æ–ø']} [green]–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏...[/green]", border_style="green"))
        else:
            CONSOLE.print(Panel(f"{EMOJI['–≤–Ω–∏–º–∞–Ω–∏–µ']} –°–ø–∞–º –Ω–µ –∑–∞–ø—É—â–µ–Ω.", border_style="yellow"))
        await asyncio.sleep(1.5)

    async def –≤—ã–ø–æ–ª–Ω–∏—Ç—å_–º–∞—Å—Å–æ–≤–æ–µ_–¥–µ–π—Å—Ç–≤–∏–µ(self, —Ç–∏–ø_–¥–µ–π—Å—Ç–≤–∏—è: str):
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
        —Ü–µ–ª–∏ = []
        if —Ç–∏–ø_–¥–µ–π—Å—Ç–≤–∏—è in ("—Ä–∞—Å—Å—ã–ª–∫–∞_–ª–∏—á–Ω—ã–µ", "—É–¥–∞–ª–∏—Ç—å_–ª–∏—á–Ω—ã–µ"):
            async for –¥–∏–∞–ª–æ–≥ in self.–∫–ª–∏–µ–Ω—Ç.iter_dialogs():
                if isinstance(–¥–∏–∞–ª–æ–≥.entity, User) and not –¥–∏–∞–ª–æ–≥.entity.bot and not –¥–∏–∞–ª–æ–≥.entity.is_self:
                    —Ü–µ–ª–∏.append(–¥–∏–∞–ª–æ–≥.id)
        elif —Ç–∏–ø_–¥–µ–π—Å—Ç–≤–∏—è in ("—Ä–∞—Å—Å—ã–ª–∫–∞_–≥—Ä—É–ø–ø—ã", "–ø–æ–∫–∏–Ω—É—Ç—å_–≥—Ä—É–ø–ø—ã"):
            async for –¥–∏–∞–ª–æ–≥ in self.–∫–ª–∏–µ–Ω—Ç.iter_dialogs():
                —Å—É—â–Ω–æ—Å—Ç—å = –¥–∏–∞–ª–æ–≥.entity
                if isinstance(—Å—É—â–Ω–æ—Å—Ç—å, Chat) or (isinstance(—Å—É—â–Ω–æ—Å—Ç—å, Channel) and —Å—É—â–Ω–æ—Å—Ç—å.megagroup):
                    —Ü–µ–ª–∏.append(–¥–∏–∞–ª–æ–≥.id)
        elif —Ç–∏–ø_–¥–µ–π—Å—Ç–≤–∏—è == "–ø–æ–∫–∏–Ω—É—Ç—å_–∫–∞–Ω–∞–ª—ã":
            async for –¥–∏–∞–ª–æ–≥ in self.–∫–ª–∏–µ–Ω—Ç.iter_dialogs():
                if isinstance(–¥–∏–∞–ª–æ–≥.entity, Channel) and not –¥–∏–∞–ª–æ–≥.entity.megagroup:
                    —Ü–µ–ª–∏.append(–¥–∏–∞–ª–æ–≥.id)
        elif —Ç–∏–ø_–¥–µ–π—Å—Ç–≤–∏—è == "—É–¥–∞–ª–∏—Ç—å_–±–æ—Ç–æ–≤":
            async for –¥–∏–∞–ª–æ–≥ in self.–∫–ª–∏–µ–Ω—Ç.iter_dialogs():
                if isinstance(–¥–∏–∞–ª–æ–≥.entity, User) and –¥–∏–∞–ª–æ–≥.entity.bot:
                    —Ü–µ–ª–∏.append(–¥–∏–∞–ª–æ–≥.id)

        if not —Ü–µ–ª–∏:
            CONSOLE.print(Panel(f"{EMOJI['–≤–Ω–∏–º–∞–Ω–∏–µ']} –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —á–∞—Ç–æ–≤ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è.", border_style="yellow"))
            await asyncio.sleep(2)
            return

        if —Ç–∏–ø_–¥–µ–π—Å—Ç–≤–∏—è.startswith("—Ä–∞—Å—Å—ã–ª–∫–∞"):
            —Å–æ–æ–±—â–µ–Ω–∏–µ = await self._–ø–æ–ª—É—á–∏—Ç—å_—Å–æ–æ–±—â–µ–Ω–∏–µ_–¥–ª—è_—Å–ø–∞–º–∞()
            if not —Å–æ–æ–±—â–µ–Ω–∏–µ:
                return
            if not await questionary.confirm(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {len(—Ü–µ–ª—è–º)} —á–∞—Ç–∞–º?", style=CUSTOM_STYLE).ask_async():
                return
            await self._—Ä–∞—Å—Å—ã–ª–∫–∞(—Ü–µ–ª–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        elif —Ç–∏–ø_–¥–µ–π—Å—Ç–≤–∏—è.startswith("–ø–æ–∫–∏–Ω—É—Ç—å"):
            if not await questionary.confirm(f"–ü–æ–∫–∏–Ω—É—Ç—å {len(—Ü–µ–ª–∏)} —á–∞—Ç–æ–≤?", style=CUSTOM_STYLE).ask_async():
                return
            await self._–ø–æ–∫–∏–Ω—É—Ç—å_—á–∞—Ç—ã(—Ü–µ–ª–∏)
        elif —Ç–∏–ø_–¥–µ–π—Å—Ç–≤–∏—è.startswith("—É–¥–∞–ª–∏—Ç—å"):
            if not await questionary.confirm(f"–£–¥–∞–ª–∏—Ç—å {len(—Ü–µ–ª–∏)} —á–∞—Ç–æ–≤?", style=CUSTOM_STYLE).ask_async():
                return
            await self._—É–¥–∞–ª–∏—Ç—å_—á–∞—Ç—ã(—Ü–µ–ª–∏)

    async def _—Ä–∞—Å—Å—ã–ª–∫–∞(self, —Ü–µ–ª–∏: List[int], —Å–æ–æ–±—â–µ–Ω–∏–µ: str):
        CONSOLE.print(Panel(f"{EMOJI['—Ä–∞—Å—Å—ã–ª–∫–∞']} [cyan]–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...[/cyan]", border_style="cyan"))
        —É—Å–ø–µ—à–Ω—ã—Ö = 0
        for idx, —Ü–µ–ª—å in enumerate(—Ü–µ–ª–∏, 1):
            try:
                await self.–∫–ª–∏–µ–Ω—Ç.send_message(—Ü–µ–ª—å, —Å–æ–æ–±—â–µ–Ω–∏–µ)
                —É—Å–ø–µ—à–Ω—ã—Ö += 1
                CONSOLE.print(f"[{idx}/{len(—Ü–µ–ª–∏)}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {—Ü–µ–ª—å}")
            except FloodWaitError as e:
                CONSOLE.print(f"{EMOJI['–≤–Ω–∏–º–∞–Ω–∏–µ']} FloodWait: –∂–¥—ë–º {e.seconds} —Å–µ–∫...")
                await asyncio.sleep(e.seconds)
                # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å?
            except Exception as e:
                CONSOLE.print(f"{EMOJI['–æ—à–∏–±–∫–∞']} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {—Ü–µ–ª—å}: {e}")
            await asyncio.sleep(1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        CONSOLE.print(Panel(f"{EMOJI['—É—Å–ø–µ—Ö']} –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {—É—Å–ø–µ—à–Ω—ã—Ö}/{len(—Ü–µ–ª–∏)}", border_style="green"))
        await asyncio.sleep(2)

    async def _–ø–æ–∫–∏–Ω—É—Ç—å_—á–∞—Ç—ã(self, —Ü–µ–ª–∏: List[int]):
        CONSOLE.print(Panel(f"{EMOJI['–≤—ã—Ö–æ–¥']} [yellow]–ü–æ–∫–∏–¥–∞–µ–º —á–∞—Ç—ã...[/yellow]", border_style="yellow"))
        —É—Å–ø–µ—à–Ω—ã—Ö = 0
        for idx, —Ü–µ–ª—å in enumerate(—Ü–µ–ª–∏, 1):
            try:
                await self.–∫–ª–∏–µ–Ω—Ç.delete_dialog(—Ü–µ–ª—å)
                —É—Å–ø–µ—à–Ω—ã—Ö += 1
                CONSOLE.print(f"[{idx}/{len(—Ü–µ–ª–∏)}] –ü–æ–∫–∏–Ω—É—Ç {—Ü–µ–ª—å}")
            except Exception as e:
                CONSOLE.print(f"{EMOJI['–æ—à–∏–±–∫–∞']} –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ {—Ü–µ–ª—å}: {e}")
            await asyncio.sleep(1)
        CONSOLE.print(Panel(f"{EMOJI['—É—Å–ø–µ—Ö']} –í—ã—Ö–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω. –£—Å–ø–µ—à–Ω–æ: {—É—Å–ø–µ—à–Ω—ã—Ö}/{len(—Ü–µ–ª–∏)}", border_style="green"))
        await asyncio.sleep(2)

    async def _—É–¥–∞–ª–∏—Ç—å_—á–∞—Ç—ã(self, —Ü–µ–ª–∏: List[int]):
        CONSOLE.print(Panel(f"{EMOJI['—É–¥–∞–ª–∏—Ç—å']} [red]–£–¥–∞–ª—è–µ–º —á–∞—Ç—ã...[/red]", border_style="red"))
        —É—Å–ø–µ—à–Ω—ã—Ö = 0
        for idx, —Ü–µ–ª—å in enumerate(—Ü–µ–ª–∏, 1):
            try:
                await self.–∫–ª–∏–µ–Ω—Ç.delete_dialog(—Ü–µ–ª—å)
                —É—Å–ø–µ—à–Ω—ã—Ö += 1
                CONSOLE.print(f"[{idx}/{len(—Ü–µ–ª–∏)}] –£–¥–∞–ª—ë–Ω {—Ü–µ–ª—å}")
            except Exception as e:
                CONSOLE.print(f"{EMOJI['–æ—à–∏–±–∫–∞']} –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {—Ü–µ–ª—å}: {e}")
            await asyncio.sleep(1)
        CONSOLE.print(Panel(f"{EMOJI['—É—Å–ø–µ—Ö']} –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø–µ—à–Ω–æ: {—É—Å–ø–µ—à–Ω—ã—Ö}/{len(—Ü–µ–ª–∏)}", border_style="green"))
        await asyncio.sleep(2)

async def –æ—Å–Ω–æ–≤–Ω–∞—è_—Ñ—É–Ω–∫—Ü–∏—è():
    –±–∞–Ω–Ω–µ—Ä = —Å–æ–∑–¥–∞—Ç—å_3d_–±–∞–Ω–Ω–µ—Ä()
    –æ–ø–∏—Å–∞–Ω–∏–µ = f"[bold #29b6f6]           [üß®] –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –∏ —Å–ø–∞–º–∞ –≤ Telegram [üß®][/bold #29b6f6]"
    
    —à–∏—Ä–∏–Ω–∞ = CONSOLE.width
    –æ—Ç—Å—Ç—É–ø_–æ–ø–∏—Å–∞–Ω–∏—è = max(0, (—à–∏—Ä–∏–Ω–∞ - len("           [üß®] –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –∏ —Å–ø–∞–º–∞ –≤ Telegram [üß®]")) // 2)
    –æ–ø–∏—Å–∞–Ω–∏–µ = " " * –æ—Ç—Å—Ç—É–ø_–æ–ø–∏—Å–∞–Ω–∏—è + –æ–ø–∏—Å–∞–Ω–∏–µ.strip()
    
    –ø–æ–ª–Ω—ã–π_–±–∞–Ω–Ω–µ—Ä = f"{–±–∞–Ω–Ω–µ—Ä}\n{–æ–ø–∏—Å–∞–Ω–∏–µ}"
    CONSOLE.print(Panel(–ø–æ–ª–Ω—ã–π_–±–∞–Ω–Ω–µ—Ä, style="bold #0288d1", padding=(1, 2)))

    –º–µ–Ω–µ–¥–∂–µ—Ä = –ú–µ–Ω–µ–¥–∂–µ—Ä–ê–∫–∫–∞—É–Ω—Ç–æ–≤()
    while True:
        –∞–∫–∫–∞—É–Ω—Ç = await –º–µ–Ω–µ–¥–∂–µ—Ä.–≤—ã–±—Ä–∞—Ç—å()
        if not –∞–∫–∫–∞—É–Ω—Ç:
            sys.exit(0)

        –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ = –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–¢–µ–ª–µ–≥—Ä–∞–º(–∞–∫–∫–∞—É–Ω—Ç)
        if await –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è():
            await –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.–∑–∞–ø—É—Å—Ç–∏—Ç—å()
        else:
            await asyncio.sleep(2)

if __name__ == "__main__":
    try:
        asyncio.run(–æ—Å–Ω–æ–≤–Ω–∞—è_—Ñ—É–Ω–∫—Ü–∏—è())
    except KeyboardInterrupt:
        CONSOLE.print(f"\n{EMOJI['–≤—ã—Ö–æ–¥']} [bold yellow]–í—ã—Ö–æ–¥ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.[/bold yellow]")
        sys.exit(0)
